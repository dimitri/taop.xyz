{"version":3,"sources":["DbSize/FormItem.js","DbSize/DbSize.js","index.js"],"names":["FormItem","label","type","value","options","onChange","error","suffix","input","className","e","target","map","v","key","checked","o","validInt","val","String","convertValue","Math","round","ReactDOM","render","useState","formTable","setFormTable","formAdded","setFormAdded","formSize","setFormSize","Date","toISOString","substr","formStart","setFormStart","table","added","size","start","errors","setErrors","data","setData","calculate","err","inError","currentDate","currentDay","getDate","currentMonth","getMonth","currentYear","getFullYear","d","Array","fill","_","i","month","year","floor","lastDay","day","min","date","UTC","name","toLocaleDateString","delay","getTime","useEffect","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","tickFormatter","formatter","stroke","document","getElementById"],"mappings":"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","file":"static/js/main.17f43a09.chunk.js","sourcesContent":["import React from 'react';\n\nimport './FormItem.css';\n\nexport const FormItem = ({\n  label,\n  type = 'number',\n  value,\n  options,\n  onChange,\n  error,\n  suffix,\n}) => {\n  let input = (\n    <input\n      className=\"FormItemInputText\"\n      type={type}\n      value={value}\n      onChange={e => onChange(e.target.value)}\n    />\n  );\n  if (type === 'radio') {\n    input = options.map(v => {\n      return (\n        <>\n          <input\n            key={v}\n            type=\"radio\"\n            value={v}\n            onChange={() => onChange(v)}\n            checked={v === value}\n          />\n          {v}\n        </>\n      );\n    });\n  }\n  if (type === 'select') {\n    input = (\n      <select\n        className=\"FormItemSelect\"\n        onChange={e => onChange(e.target.value)}\n        value={value}\n      >\n        {options.map(o => (\n          <option value={o.value} key={o.value}>\n            {o.label}\n          </option>\n        ))}\n      </select>\n    );\n  }\n  return (\n    <div className=\"FormItem\">\n      <div className=\"FormItemInput\">\n        <label>{label}</label>\n        {input}\n        {suffix && <span className=\"suffix\">{suffix}</span>}\n      </div>\n      {error && <div>{error}</div>}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\nimport { FormItem } from './FormItem';\n\nimport './DbSize.css';\n\nconst validInt = val => val === String(+val);\n\nconst convertValue = value => {\n  let val = `${Math.round(value * 10) / 10}Mb`;\n  if (value > 1024 * 1024 * 1024) {\n    val = `${Math.round((value / 1024 / 1024 / 1024) * 10) / 10}Pt`;\n  } else if (value > 1024 * 1024) {\n    val = `${Math.round((value / 1024 / 1024) * 10) / 10}Tb`;\n  } else if (value > 1024) {\n    val = `${Math.round((value / 1024) * 10) / 10}Gb`;\n  }\n  return val;\n};\n\nexport const DbSize = () => {\n  const [formTable, setFormTable] = useState('10');\n  const [formAdded, setFormAdded] = useState('1000');\n  const [formSize, setFormSize] = useState('1');\n  const [formStart, setFormStart] = useState(\n    new Date().toISOString().substr(0, 10)\n  );\n  const [errors, setErrors] = useState({\n    table: null,\n    added: null,\n    size: null,\n    start: null,\n  });\n  const [data, setData] = useState([]);\n  const calculate = () => {\n    const invalidFormat = 'Invalid format';\n    const err = { table: null, added: null, size: null };\n    let inError = false;\n    if (formTable && !validInt(formTable)) {\n      err.table = invalidFormat;\n      inError = true;\n    }\n    if (formAdded && !validInt(formAdded)) {\n      err.added = invalidFormat;\n      inError = true;\n    }\n    if (formSize && !validInt(formSize)) {\n      err.size = invalidFormat;\n      inError = true;\n    }\n    setErrors(err);\n    if (inError) return;\n    const currentDate = new Date(formStart);\n    const currentDay = currentDate.getDate();\n    const currentMonth = currentDate.getMonth();\n    const currentYear = currentDate.getFullYear();\n\n    const d = new Array(60).fill(0).map((_, i) => {\n      const month = (currentMonth + i + 1) % 12;\n      const year = currentYear + Math.floor((currentMonth + i + 1) / 12);\n      const lastDay = new Date(year, month + 1, 0).getDate();\n      const day = Math.min(currentDay, lastDay);\n      const date = new Date(Date.UTC(year, month, day));\n      const name = date.toLocaleDateString('en-EN', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n      });\n      const rowSize = 0.0012;\n      const delay = (date.getTime() - currentDate.getTime()) / 24 / 3600 / 1000;\n      return {\n        name,\n        size: +formSize * 1024 + +formAdded * +formTable * rowSize * delay,\n      };\n    });\n    setData(d);\n  };\n\n  useEffect(calculate, [formSize, formTable, formAdded, formStart]);\n  useEffect(calculate, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"Form\">\n        <FormItem\n          type=\"select\"\n          label=\"Number of table\"\n          options={[\n            { value: 10, label: '10' },\n            { value: 20, label: '20' },\n            { value: 50, label: '50' },\n            { value: 100, label: '100' },\n          ]}\n          value={formTable}\n          onChange={setFormTable}\n          error={errors.table}\n        />\n        <FormItem\n          type=\"select\"\n          label=\"Number of rows added each day\"\n          options={[\n            { value: 1000, label: '1000' },\n            { value: 10000, label: '10k' },\n            { value: 100000, label: '100k' },\n            { value: 1000000, label: '1M' },\n            { value: 10000000, label: '10M' },\n          ]}\n          value={formAdded}\n          onChange={setFormAdded}\n          error={errors.added}\n        />\n        <FormItem\n          type=\"select\"\n          label=\"Database size\"\n          options={[\n            { value: 1, label: '1Gb' },\n            { value: 10, label: '10Gb' },\n            { value: 100, label: '100Gb' },\n            { value: 1024, label: '1Tb' },\n            { value: 10000, label: '100Tb' },\n          ]}\n          value={formSize}\n          onChange={setFormSize}\n          error={errors.size}\n        />\n        <FormItem\n          type=\"date\"\n          label=\"Start estimation\"\n          value={formStart}\n          onChange={setFormStart}\n          error={errors.start}\n        />\n      </div>\n      <BarChart\n        width={840}\n        height={600}\n        data={data}\n        margin={{\n          top: 10,\n          right: 30,\n          left: 30,\n          bottom: 0,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis tickFormatter={convertValue} />\n        <Tooltip formatter={value => [convertValue(value), 'Database size']} />\n        <Bar type=\"monotone\" dataKey=\"size\" stroke=\"#67527A\" fill=\"#896da1\" />\n      </BarChart>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { DbSize } from './DbSize';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<DbSize />, document.getElementById('dbsize'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}